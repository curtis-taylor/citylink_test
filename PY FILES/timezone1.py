# -*- coding: utf-8 -*-
"""TIMEZONE1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-cFLghsfa5FtqBxeksGSWANX6TUMRYqT
"""

import requests
import pandas as pd
import json
import datetime

cityname = ["London", "Toronto", "Rome", "Sydney"]
country = ["United Kingdom", "Canada", "Italy", "Australia"]
region = ["City of London, Greater London", "Ontario", "Lazio", "New South Wales"]


key = "5f7c9d283060480d857194323212906"

count = 0

# Function to check for text terms in json info
def check_name(x, keyname, name): 
  checktext = '"{}":"{}"'.format(keyname, name)
  print("Name Search Term: {}".format(checktext))
  if checktext in x:
    print("{} found in json info".format(checktext))
  else:
    print("{} not found in json info: json appears to be not valid".format(checktext))

#Function for datetime validation
def datetime_check(localtime_list, localtime_string):
  if len(localtime_list[0]) == 10 and len(localtime_list[1]):
     print(">> LOCALTIME DIGIT COUNT test PASS")
  else:
     print(">> LOCALTIME DIGIT COUNT NOT CORRECT!!!!!")

  date_stst = loamp_licaltime_list[0].split('-')
  time_stamp_list = localtime_list[0].split(':')

  print("YEAR is correct") if date_stamp_list[0] == "2021" else print("YEAR is INVALID")

  try:
    t = datetime.datetime.strptime(localtime_string,"%Y-%m-%d %H:%M")
    print("t: {}".format(t))
    print("LOCAL DATE is A VALID date")
  except ValueError:
    print("LOCAL DATE is INVALID date: FAIL")

for name in cityname:
  timezone = "http://api.weatherapi.com/v1/current.json?key={}&q={}".format(key, cityname[count])
  x = requests.get(timezone)
  z = x.json()
  print(x.text)
  print("STATUS: {}".format(x))
  print("** LOCALTIME: {}".format(z['location']['localtime']))
  localtime_list = z['location']['localtime'].split(' ')

  datetime_check(localtime_list, z['location']['localtime'])

  print("Call Status for {} call: {}".format(name, x))
  check_name(x.text, "name", cityname[count])
  check_name(x.text, "country", country[count])
  check_name(x.text, "region", region[count])
  print("___")
  count = count + 1

  #data = json.x