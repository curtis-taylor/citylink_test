# -*- coding: utf-8 -*-
"""ErrorCheck1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QhG-dWPUD8DqhADPoiZq3ena-UcOrIWt
"""

import requests
import pandas as pd
import json
import datetime

#cityname = ["London", "Toronto", "Rome", "Sydney"]
country = ["United Kingdom", "Canada", "Italy", "Australia"]
region = ["City of London, Greater London", "Ontario", "Lazio", "New South Wales"]

key_list = ["5f7c9d283060480d857194323212906", "", "5f7c9d283060480d857194323212906", "5f7c9d283060480d857194323212906", "5f7c9d283060480d857194323212906", "39483", "5f7c9d283060480d857194323212906"]
q_list = ["Toronto", "", "Moon", "Jupiter", "", "Rome", "Canada"] # Error with Moon it brings Moonah

key = "5f7c9d283060480d857194323212906"

count = 0

def error_check(json_data, i):
  result_list = ["location", "error", "error", "location", "error", "error", "location"]
  error_dict = {1002:"API key is invalid", 1003:"Parameter q", 1005:"API request url", 1006:"No location found", 2006:"API key"}


  if result_list[count] == "error":
    if 'error' in json_data:
        error_code = json_data["error"]["code"]
        error_message = json_data["error"]["message"]
        print("$$$ {}".format(error_dict[error_code]))

        if error_dict[error_code] in error_message:
          print("PASS: API error Code Message appears CORRECT for {}".format(error_code))
        else:
          print("FAIL: API error Message INCORRECT for {}".format(error_code))    
    else:
      print("FAIL: JSON DATA should throw an ERROR") 
  else:
      if 'location' in json_data:
        print("PASS: NO API ERROR")
      else:
        print("FAIL: API ERROR SHOULD NOT BE DISPLAYED")

for q in q_list:
  print("key: {}       q: {}".format(key_list[count], q_list[count]))
  timezone = "http://api.weatherapi.com/v1/current.json?key={}&q={}".format(key_list[count], q_list[count])

  try:
    x = requests.get(timezone)
    print(x)
    z = x.json()
    print(z)
  except VisualError:
    print("ERROR")

  print(z)
  error_check(z, count)
  #print("** LOCALTIME: {}".format(z['location']['localtime']))
  #localtime_list = z['location']['localtime'].split(' ')

  #datetime_check(localtime_list, z['location']['localtime'])

  #print("Call Status for {} call: {}".format(name, x))
  #check_name(x.text, "name", cityname[count])
  #check_name(x.text, "country", country[count])
  #check_name(x.text, "region", region[count])
  print("___")
  count = count + 1

